# ./vendor/bin/ece-docker 'build:compose'
version: '2.1'
services:
  db:
    hostname: db.magento2.docker
    image: 'mariadb:10.3'
    shm_size: 2gb
    environment:
      - MYSQL_ROOT_PASSWORD=magento2
      - MYSQL_DATABASE=magento2
      - MYSQL_USER=magento2
      - MYSQL_PASSWORD=magento2
    ports:
      - '3306:3306'
    volumes:
      - 'magento-magento-db:/var/lib/mysql'
    healthcheck:
      test: 'mysqladmin ping -h localhost -pmagento2'
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      magento:
        aliases:
          - db.magento2.docker
  sentinel:
      image: docker.io/bitnami/redis-sentinel:6.2
      environment:
        # this should be changed in production
        - REDIS_SENTINEL_QUORUM=1
        - REDIS_SENTINEL_DOWN_AFTER_MILLISECONDS=5000
        - REDIS_SENTINEL_RESOLVE_HOSTNAMES=yes
        - REDIS_MASTER_HOST=redis
      networks:
        magento:
          aliases:
            - sentinel.magento2.docker
  redis:
      image: docker.io/bitnami/redis:6.2
      environment:
        # ALLOW_EMPTY_PASSWORD is recommended only for development.
        - ALLOW_EMPTY_PASSWORD=yes
        - REDIS_REPLICATION_MODE=master
        - REDIS_REPLICATION_ROLE=master

      networks:
        magento:
          aliases:
            - redis.magento2.docker
  redis2:
      image: docker.io/bitnami/redis:6.2
      environment:
        # ALLOW_EMPTY_PASSWORD is recommended only for development.
        - ALLOW_EMPTY_PASSWORD=yes
        - REDIS_REPLICATION_MODE=slave
        - REDIS_REPLICATION_ROLE=slave
        - REDIS_MASTER_HOST=redis
        - REDIS_MASTER_PORT_NUMBER=6379
      networks:
        magento:
          aliases:
            - redis2.magento2.docker
  elasticsearch:
    hostname: elasticsearch.magento2.docker
    image: 'magento/magento-cloud-docker-elasticsearch:7.5-1.2.4'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
    networks:
      magento:
        aliases:
          - elasticsearch.magento2.dockerfile
  fpm:
    hostname: fpm.magento2.docker
    build:
      context: ./fpm
      dockerfile: ./Dockerfile-fpm
    volumes:
      - 'magento-pub-media:/app/pub/media'
      - 'magento-pub-static-cache:/app/pub/static/_cache'
      - 'magento-report:/app/var/report'
      - 'magento-export:/app/var/export'
      - 'magento-fileBrowser-files:/app/var/import/images'
    environment:
      - PHP_EXTENSIONS=bcmath bz2 calendar exif gd gettext intl mysqli pcntl pdo_mysql soap sockets sysvmsg sysvsem sysvshm opcache zip xsl sodium redis blackfire imagick imap pspell shmop tidy gmp igbinary 
      - DB_HOST=db 
      # this will be used for read-only connections, it is set to the same value as DB_HOST for developemnt 
      - DB_HOST_RO=db              
      - DB_NAME=magento2
      - DB_USER=magento2
      - DB_PASS=magento2
      - ELASTICSEARCH_HOST=elasticsearch
      - MAGE_MODE=production
      - PHP_MEMORY_LIMIT=2G
      - DEBUG=false
      - NEWRELIC_KEY=eu01xx3a72bb1e47004ca93cc682a2c19cc7NRAL
      - NEWRELIC_APP_NAME=Tamata-FPM-staging
      - SENTINEL_MASTER=mymaster
      - SENTINEL=sentinel:26379
      - SENTINEL_SERVERS=sentinel:26379
      - SENTINEL_VERIFY_MASTER=1
      - SENTINEL_CONNECT_RETRIES=5
    
    networks:
      magento:
        aliases:
          - fpm.magento2.docker
  web:
    hostname: web.magento2.docker
    build:
      context: ./fpm
      dockerfile: ./Dockerfile-web
    volumes:
      - 'magento-pub-media:/app/pub/media'
      - 'magento-pub-static-cache:/app/pub/static/_cache'
      - 'magento-report:/app/var/report'
      - 'magento-export:/app/var/export'
    environment:
      - FPM_HOST=fpm
      - FPM_PORT=9000
      - WITH_XDEBUG=0
      - NGINX_WORKER_PROCESSES=1
      - NGINX_WORKER_CONNECTIONS=1024
      - MAGE_MODE=production
    # use port 8080 only in K8s , 443 has been added here just to enable tests in docker compose builds
    ports:
      - '8080:8080'
      - '443:443'
    networks:
      magento:
        aliases:
          - web.magento2.docker

  filebrowser:
    hostname: filebrowser.magento2.docker
    build:
      context: ./fileBrowser
      dockerfile: ./Dockerfile-fileBrowser
    volumes:
      - 'magento-fileBrowser-files:/srv'
      - 'magento-fileBrowser-database:/database'
    ports:
      - '8081:80'
    networks:
      magento:
        aliases:
          - web.magento2.docker

  mailhog:
    hostname: mailhog.magento2.docker
    image: 'mailhog/mailhog:latest'
    ports:
      - '1025:1025'
      - '8025:8025'
    networks:
      magento:
        aliases:
          - mailhog.magento2.docker
volumes:
  magento-magento-db: {  }
  magento-pub-media: {  }
  magento-pub-static-cache: {  }
  magento-report: {  }
  magento-export: {  }
  magento-fileBrowser-files: {  }
  magento-fileBrowser-database: {  }
networks:
  magento:
    driver: bridge
    