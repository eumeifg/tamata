<?php
/**
 * Magedelight
 * Copyright (C) 2019 Magedelight <info@magedelight.com>
 *
 * @category Magedelight
 * @package Magedelight_Backend
 * @copyright Copyright (c) 2019 Mage Delight (http://www.magedelight.com/)
 * @license http://opensource.org/licenses/gpl-3.0.html GNU General Public License,version 3 (GPL-3.0)
 * @author Magedelight <info@magedelight.com>
 */
namespace Magedelight\Backend\Setup;

use Magento\Framework\Config\Data\ConfigData;
use Magento\Framework\Config\File\ConfigFilePool;
use Magento\Framework\Setup\ConfigOptionsListInterface;
use Magento\Framework\Setup\Option\TextConfigOption;
use Magento\Framework\App\DeploymentConfig;
use \Magedelight\Backend\Setup\VendorFrontnameGenerator;

/**
 * Deployment configuration options needed for Backend module
 *
 * @author Rocket Bazaar Core Team
 */
class ConfigOptionsList implements ConfigOptionsListInterface
{
    /**
     * Input key for the options
     */
    const INPUT_KEY_VENDOR_FRONTNAME = 'seller-frontname';

    /**
     * Path to the values in the deployment config
     */
    const CONFIG_PATH_VENDOR_FRONTNAME = 'seller/frontName';

    /**
     * {@inheritdoc}
     */
    public function getOptions()
    {
        return [
            new TextConfigOption(
                self::INPUT_KEY_VENDOR_FRONTNAME,
                TextConfigOption::FRONTEND_WIZARD_TEXT,
                self::CONFIG_PATH_VENDOR_FRONTNAME,
                'Seller Panel frontname (will be autogenerated if missing)'
            )
        ];
    }

    /**
     * {@inheritdoc}
     * @SuppressWarnings(PHPMD.UnusedFormalParameter)
     */
    public function createConfig(array $options, DeploymentConfig $deploymentConfig)
    {
        $configData = new ConfigData(ConfigFilePool::APP_ENV);

        if (!$deploymentConfig->get(self::CONFIG_PATH_VENDOR_FRONTNAME)
            && !isset($options[self::INPUT_KEY_VENDOR_FRONTNAME])) {
            $options[self::INPUT_KEY_VENDOR_FRONTNAME] = VendorFrontnameGenerator::generate();
        }
        if (isset($options[self::INPUT_KEY_VENDOR_FRONTNAME])) {
            $configData->set(self::CONFIG_PATH_VENDOR_FRONTNAME, $options[self::INPUT_KEY_VENDOR_FRONTNAME]);
        }

        return [$configData];
    }

    /**
     * {@inheritdoc}
     */
    public function validate(array $options, DeploymentConfig $deploymentConfig)
    {
        $errors = [];
        if (isset($options[self::INPUT_KEY_VENDOR_FRONTNAME])
            && !preg_match('/^[a-zA-Z0-9_]+$/', $options[self::INPUT_KEY_VENDOR_FRONTNAME])
        ) {
            $errors[] = "Invalid vendor frontname '{$options[self::INPUT_KEY_VENDOR_FRONTNAME]}'";
        }

        return $errors;
    }
}
